# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type SystemUser {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: String
  createdAt: DateTime
  updatedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input SystemUserWhereUniqueInput {
  id: ID
  email: String
}

input SystemUserWhereInput {
  AND: [SystemUserWhereInput!]
  OR: [SystemUserWhereInput!]
  NOT: [SystemUserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input SystemUserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input SystemUserUpdateInput {
  name: String
  email: String
  password: String
  role: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SystemUserUpdateArgs {
  where: SystemUserWhereUniqueInput!
  data: SystemUserUpdateInput!
}

input SystemUserCreateInput {
  name: String
  email: String
  password: String
  role: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Photo {
  id: ID!
  name: String
  imageFile: ImageFieldOutput
  createdAt: DateTime
  updatedAt: DateTime
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input PhotoWhereUniqueInput {
  id: ID
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: IDFilter
  name: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PhotoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PhotoUpdateInput {
  name: String
  imageFile: ImageFieldInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input PhotoUpdateArgs {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateInput!
}

input PhotoCreateInput {
  name: String
  imageFile: ImageFieldInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Legislator {
  id: ID!
  name: String
  slug: String
  image: Photo
  imageLink: String
  createdAt: DateTime
  updatedAt: DateTime
}

input LegislatorWhereUniqueInput {
  id: ID
  slug: String
}

input LegislatorWhereInput {
  AND: [LegislatorWhereInput!]
  OR: [LegislatorWhereInput!]
  NOT: [LegislatorWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  image: PhotoWhereInput
  imageLink: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input LegislatorOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  imageLink: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LegislatorUpdateInput {
  name: String
  slug: String
  image: PhotoRelateToOneForUpdateInput
  imageLink: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoRelateToOneForUpdateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
  disconnect: Boolean
}

input LegislatorUpdateArgs {
  where: LegislatorWhereUniqueInput!
  data: LegislatorUpdateInput!
}

input LegislatorCreateInput {
  name: String
  slug: String
  image: PhotoRelateToOneForCreateInput
  imageLink: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoRelateToOneForCreateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
}

type LegislativeYuanMember {
  id: ID!
  legislator: Legislator
  party: Party
  legislativeMeeting: LegislativeMeeting
  type: String
  constituency: String
  city: String
  tooltip: String
  note: String
  createdAt: DateTime
  updatedAt: DateTime
}

input LegislativeYuanMemberWhereUniqueInput {
  id: ID
}

input LegislativeYuanMemberWhereInput {
  AND: [LegislativeYuanMemberWhereInput!]
  OR: [LegislativeYuanMemberWhereInput!]
  NOT: [LegislativeYuanMemberWhereInput!]
  id: IDFilter
  legislator: LegislatorWhereInput
  party: PartyWhereInput
  legislativeMeeting: LegislativeMeetingWhereInput
  type: StringFilter
  constituency: StringNullableFilter
  city: StringNullableFilter
  tooltip: StringFilter
  note: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input LegislativeYuanMemberOrderByInput {
  id: OrderDirection
  type: OrderDirection
  constituency: OrderDirection
  city: OrderDirection
  tooltip: OrderDirection
  note: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LegislativeYuanMemberUpdateInput {
  legislator: LegislatorRelateToOneForUpdateInput
  party: PartyRelateToOneForUpdateInput
  legislativeMeeting: LegislativeMeetingRelateToOneForUpdateInput
  type: String
  constituency: String
  city: String
  tooltip: String
  note: String
  createdAt: DateTime
  updatedAt: DateTime
}

input LegislatorRelateToOneForUpdateInput {
  create: LegislatorCreateInput
  connect: LegislatorWhereUniqueInput
  disconnect: Boolean
}

input PartyRelateToOneForUpdateInput {
  create: PartyCreateInput
  connect: PartyWhereUniqueInput
  disconnect: Boolean
}

input LegislativeMeetingRelateToOneForUpdateInput {
  create: LegislativeMeetingCreateInput
  connect: LegislativeMeetingWhereUniqueInput
  disconnect: Boolean
}

input LegislativeYuanMemberUpdateArgs {
  where: LegislativeYuanMemberWhereUniqueInput!
  data: LegislativeYuanMemberUpdateInput!
}

input LegislativeYuanMemberCreateInput {
  legislator: LegislatorRelateToOneForCreateInput
  party: PartyRelateToOneForCreateInput
  legislativeMeeting: LegislativeMeetingRelateToOneForCreateInput
  type: String
  constituency: String
  city: String
  tooltip: String
  note: String
  createdAt: DateTime
  updatedAt: DateTime
}

input LegislatorRelateToOneForCreateInput {
  create: LegislatorCreateInput
  connect: LegislatorWhereUniqueInput
}

input PartyRelateToOneForCreateInput {
  create: PartyCreateInput
  connect: PartyWhereUniqueInput
}

input LegislativeMeetingRelateToOneForCreateInput {
  create: LegislativeMeetingCreateInput
  connect: LegislativeMeetingWhereUniqueInput
}

type Party {
  id: ID!
  name: String
  slug: String
  image: Photo
  imageLink: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PartyWhereUniqueInput {
  id: ID
  slug: String
}

input PartyWhereInput {
  AND: [PartyWhereInput!]
  OR: [PartyWhereInput!]
  NOT: [PartyWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  image: PhotoWhereInput
  imageLink: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PartyOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  imageLink: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PartyUpdateInput {
  name: String
  slug: String
  image: PhotoRelateToOneForUpdateInput
  imageLink: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PartyUpdateArgs {
  where: PartyWhereUniqueInput!
  data: PartyUpdateInput!
}

input PartyCreateInput {
  name: String
  slug: String
  image: PhotoRelateToOneForCreateInput
  imageLink: String
  createdAt: DateTime
  updatedAt: DateTime
}

type LegislativeMeeting {
  id: ID!
  term: Int
  startTime: CalendarDay
  endTime: CalendarDay
  committees(where: CommitteeWhereInput! = {}, orderBy: [CommitteeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommitteeWhereUniqueInput): [Committee!]
  committeesCount(where: CommitteeWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input LegislativeMeetingWhereUniqueInput {
  id: ID
  term: Int
}

input LegislativeMeetingWhereInput {
  AND: [LegislativeMeetingWhereInput!]
  OR: [LegislativeMeetingWhereInput!]
  NOT: [LegislativeMeetingWhereInput!]
  id: IDFilter
  term: IntFilter
  startTime: CalendarDayFilter
  endTime: CalendarDayFilter
  committees: CommitteeManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input CalendarDayFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayFilter
}

input CommitteeManyRelationFilter {
  every: CommitteeWhereInput
  some: CommitteeWhereInput
  none: CommitteeWhereInput
}

input LegislativeMeetingOrderByInput {
  id: OrderDirection
  term: OrderDirection
  startTime: OrderDirection
  endTime: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LegislativeMeetingUpdateInput {
  term: Int
  startTime: CalendarDay
  endTime: CalendarDay
  committees: CommitteeRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CommitteeRelateToManyForUpdateInput {
  disconnect: [CommitteeWhereUniqueInput!]
  set: [CommitteeWhereUniqueInput!]
  create: [CommitteeCreateInput!]
  connect: [CommitteeWhereUniqueInput!]
}

input LegislativeMeetingUpdateArgs {
  where: LegislativeMeetingWhereUniqueInput!
  data: LegislativeMeetingUpdateInput!
}

input LegislativeMeetingCreateInput {
  term: Int
  startTime: CalendarDay
  endTime: CalendarDay
  committees: CommitteeRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CommitteeRelateToManyForCreateInput {
  create: [CommitteeCreateInput!]
  connect: [CommitteeWhereUniqueInput!]
}

type LegislativeMeetingSession {
  id: ID!
  legislativeMeeting: LegislativeMeeting
  term: Int
  startTime: CalendarDay
  endTime: CalendarDay
  createdAt: DateTime
  updatedAt: DateTime
}

input LegislativeMeetingSessionWhereUniqueInput {
  id: ID
}

input LegislativeMeetingSessionWhereInput {
  AND: [LegislativeMeetingSessionWhereInput!]
  OR: [LegislativeMeetingSessionWhereInput!]
  NOT: [LegislativeMeetingSessionWhereInput!]
  id: IDFilter
  legislativeMeeting: LegislativeMeetingWhereInput
  term: IntFilter
  startTime: CalendarDayFilter
  endTime: CalendarDayFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input LegislativeMeetingSessionOrderByInput {
  id: OrderDirection
  term: OrderDirection
  startTime: OrderDirection
  endTime: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LegislativeMeetingSessionUpdateInput {
  legislativeMeeting: LegislativeMeetingRelateToOneForUpdateInput
  term: Int
  startTime: CalendarDay
  endTime: CalendarDay
  createdAt: DateTime
  updatedAt: DateTime
}

input LegislativeMeetingSessionUpdateArgs {
  where: LegislativeMeetingSessionWhereUniqueInput!
  data: LegislativeMeetingSessionUpdateInput!
}

input LegislativeMeetingSessionCreateInput {
  legislativeMeeting: LegislativeMeetingRelateToOneForCreateInput
  term: Int
  startTime: CalendarDay
  endTime: CalendarDay
  createdAt: DateTime
  updatedAt: DateTime
}

type Committee {
  id: ID!
  name: String
  slug: String
  type: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CommitteeWhereUniqueInput {
  id: ID
  slug: String
}

input CommitteeWhereInput {
  AND: [CommitteeWhereInput!]
  OR: [CommitteeWhereInput!]
  NOT: [CommitteeWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  type: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CommitteeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  type: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CommitteeUpdateInput {
  name: String
  slug: String
  type: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CommitteeUpdateArgs {
  where: CommitteeWhereUniqueInput!
  data: CommitteeUpdateInput!
}

input CommitteeCreateInput {
  name: String
  slug: String
  type: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Topic {
  id: ID!
  title: String
  slug: String
  speeches(where: SpeechWhereInput! = {}, orderBy: [SpeechOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SpeechWhereUniqueInput): [Speech!]
  speechesCount(where: SpeechWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input TopicWhereUniqueInput {
  id: ID
  slug: String
}

input TopicWhereInput {
  AND: [TopicWhereInput!]
  OR: [TopicWhereInput!]
  NOT: [TopicWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  speeches: SpeechManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SpeechManyRelationFilter {
  every: SpeechWhereInput
  some: SpeechWhereInput
  none: SpeechWhereInput
}

input TopicOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TopicUpdateInput {
  title: String
  slug: String
  speeches: SpeechRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SpeechRelateToManyForUpdateInput {
  disconnect: [SpeechWhereUniqueInput!]
  set: [SpeechWhereUniqueInput!]
  create: [SpeechCreateInput!]
  connect: [SpeechWhereUniqueInput!]
}

input TopicUpdateArgs {
  where: TopicWhereUniqueInput!
  data: TopicUpdateInput!
}

input TopicCreateInput {
  title: String
  slug: String
  speeches: SpeechRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SpeechRelateToManyForCreateInput {
  create: [SpeechCreateInput!]
  connect: [SpeechWhereUniqueInput!]
}

type Speech {
  id: ID!
  legislativeMeeting: LegislativeMeeting
  legislativeMeetingSession: LegislativeMeetingSession
  legislator: Legislator
  date: CalendarDay
  title: String
  slug: String
  summary: String
  content: String
  attendee: String
  ivodLink: String
  ivodStartTime: String
  ivodEndTime: String
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input SpeechWhereUniqueInput {
  id: ID
  slug: String
}

input SpeechWhereInput {
  AND: [SpeechWhereInput!]
  OR: [SpeechWhereInput!]
  NOT: [SpeechWhereInput!]
  id: IDFilter
  legislativeMeeting: LegislativeMeetingWhereInput
  legislativeMeetingSession: LegislativeMeetingSessionWhereInput
  legislator: LegislatorWhereInput
  date: CalendarDayFilter
  title: StringFilter
  slug: StringFilter
  summary: StringFilter
  content: StringFilter
  attendee: StringFilter
  ivodLink: StringFilter
  ivodStartTime: StringFilter
  ivodEndTime: StringFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input TopicManyRelationFilter {
  every: TopicWhereInput
  some: TopicWhereInput
  none: TopicWhereInput
}

input SpeechOrderByInput {
  id: OrderDirection
  date: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  summary: OrderDirection
  content: OrderDirection
  attendee: OrderDirection
  ivodLink: OrderDirection
  ivodStartTime: OrderDirection
  ivodEndTime: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SpeechUpdateInput {
  legislativeMeeting: LegislativeMeetingRelateToOneForUpdateInput
  legislativeMeetingSession: LegislativeMeetingSessionRelateToOneForUpdateInput
  legislator: LegislatorRelateToOneForUpdateInput
  date: CalendarDay
  title: String
  slug: String
  summary: String
  content: String
  attendee: String
  ivodLink: String
  ivodStartTime: String
  ivodEndTime: String
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LegislativeMeetingSessionRelateToOneForUpdateInput {
  create: LegislativeMeetingSessionCreateInput
  connect: LegislativeMeetingSessionWhereUniqueInput
  disconnect: Boolean
}

input TopicRelateToManyForUpdateInput {
  disconnect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  create: [TopicCreateInput!]
  connect: [TopicWhereUniqueInput!]
}

input SpeechUpdateArgs {
  where: SpeechWhereUniqueInput!
  data: SpeechUpdateInput!
}

input SpeechCreateInput {
  legislativeMeeting: LegislativeMeetingRelateToOneForCreateInput
  legislativeMeetingSession: LegislativeMeetingSessionRelateToOneForCreateInput
  legislator: LegislatorRelateToOneForCreateInput
  date: CalendarDay
  title: String
  slug: String
  summary: String
  content: String
  attendee: String
  ivodLink: String
  ivodStartTime: String
  ivodEndTime: String
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LegislativeMeetingSessionRelateToOneForCreateInput {
  create: LegislativeMeetingSessionCreateInput
  connect: LegislativeMeetingSessionWhereUniqueInput
}

input TopicRelateToManyForCreateInput {
  create: [TopicCreateInput!]
  connect: [TopicWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createSystemUser(data: SystemUserCreateInput!): SystemUser
  createSystemUsers(data: [SystemUserCreateInput!]!): [SystemUser]
  updateSystemUser(where: SystemUserWhereUniqueInput!, data: SystemUserUpdateInput!): SystemUser
  updateSystemUsers(data: [SystemUserUpdateArgs!]!): [SystemUser]
  deleteSystemUser(where: SystemUserWhereUniqueInput!): SystemUser
  deleteSystemUsers(where: [SystemUserWhereUniqueInput!]!): [SystemUser]
  createPhoto(data: PhotoCreateInput!): Photo
  createPhotos(data: [PhotoCreateInput!]!): [Photo]
  updatePhoto(where: PhotoWhereUniqueInput!, data: PhotoUpdateInput!): Photo
  updatePhotos(data: [PhotoUpdateArgs!]!): [Photo]
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  deletePhotos(where: [PhotoWhereUniqueInput!]!): [Photo]
  createLegislator(data: LegislatorCreateInput!): Legislator
  createLegislators(data: [LegislatorCreateInput!]!): [Legislator]
  updateLegislator(where: LegislatorWhereUniqueInput!, data: LegislatorUpdateInput!): Legislator
  updateLegislators(data: [LegislatorUpdateArgs!]!): [Legislator]
  deleteLegislator(where: LegislatorWhereUniqueInput!): Legislator
  deleteLegislators(where: [LegislatorWhereUniqueInput!]!): [Legislator]
  createLegislativeYuanMember(data: LegislativeYuanMemberCreateInput!): LegislativeYuanMember
  createLegislativeYuanMembers(data: [LegislativeYuanMemberCreateInput!]!): [LegislativeYuanMember]
  updateLegislativeYuanMember(where: LegislativeYuanMemberWhereUniqueInput!, data: LegislativeYuanMemberUpdateInput!): LegislativeYuanMember
  updateLegislativeYuanMembers(data: [LegislativeYuanMemberUpdateArgs!]!): [LegislativeYuanMember]
  deleteLegislativeYuanMember(where: LegislativeYuanMemberWhereUniqueInput!): LegislativeYuanMember
  deleteLegislativeYuanMembers(where: [LegislativeYuanMemberWhereUniqueInput!]!): [LegislativeYuanMember]
  createParty(data: PartyCreateInput!): Party
  createParties(data: [PartyCreateInput!]!): [Party]
  updateParty(where: PartyWhereUniqueInput!, data: PartyUpdateInput!): Party
  updateParties(data: [PartyUpdateArgs!]!): [Party]
  deleteParty(where: PartyWhereUniqueInput!): Party
  deleteParties(where: [PartyWhereUniqueInput!]!): [Party]
  createLegislativeMeeting(data: LegislativeMeetingCreateInput!): LegislativeMeeting
  createLegislativeMeetings(data: [LegislativeMeetingCreateInput!]!): [LegislativeMeeting]
  updateLegislativeMeeting(where: LegislativeMeetingWhereUniqueInput!, data: LegislativeMeetingUpdateInput!): LegislativeMeeting
  updateLegislativeMeetings(data: [LegislativeMeetingUpdateArgs!]!): [LegislativeMeeting]
  deleteLegislativeMeeting(where: LegislativeMeetingWhereUniqueInput!): LegislativeMeeting
  deleteLegislativeMeetings(where: [LegislativeMeetingWhereUniqueInput!]!): [LegislativeMeeting]
  createLegislativeMeetingSession(data: LegislativeMeetingSessionCreateInput!): LegislativeMeetingSession
  createLegislativeMeetingSessions(data: [LegislativeMeetingSessionCreateInput!]!): [LegislativeMeetingSession]
  updateLegislativeMeetingSession(where: LegislativeMeetingSessionWhereUniqueInput!, data: LegislativeMeetingSessionUpdateInput!): LegislativeMeetingSession
  updateLegislativeMeetingSessions(data: [LegislativeMeetingSessionUpdateArgs!]!): [LegislativeMeetingSession]
  deleteLegislativeMeetingSession(where: LegislativeMeetingSessionWhereUniqueInput!): LegislativeMeetingSession
  deleteLegislativeMeetingSessions(where: [LegislativeMeetingSessionWhereUniqueInput!]!): [LegislativeMeetingSession]
  createCommittee(data: CommitteeCreateInput!): Committee
  createCommittees(data: [CommitteeCreateInput!]!): [Committee]
  updateCommittee(where: CommitteeWhereUniqueInput!, data: CommitteeUpdateInput!): Committee
  updateCommittees(data: [CommitteeUpdateArgs!]!): [Committee]
  deleteCommittee(where: CommitteeWhereUniqueInput!): Committee
  deleteCommittees(where: [CommitteeWhereUniqueInput!]!): [Committee]
  createTopic(data: TopicCreateInput!): Topic
  createTopics(data: [TopicCreateInput!]!): [Topic]
  updateTopic(where: TopicWhereUniqueInput!, data: TopicUpdateInput!): Topic
  updateTopics(data: [TopicUpdateArgs!]!): [Topic]
  deleteTopic(where: TopicWhereUniqueInput!): Topic
  deleteTopics(where: [TopicWhereUniqueInput!]!): [Topic]
  createSpeech(data: SpeechCreateInput!): Speech
  createSpeeches(data: [SpeechCreateInput!]!): [Speech]
  updateSpeech(where: SpeechWhereUniqueInput!, data: SpeechUpdateInput!): Speech
  updateSpeeches(data: [SpeechUpdateArgs!]!): [Speech]
  deleteSpeech(where: SpeechWhereUniqueInput!): Speech
  deleteSpeeches(where: [SpeechWhereUniqueInput!]!): [Speech]
  endSession: Boolean!
  authenticateSystemUserWithPassword(email: String!, password: String!): SystemUserAuthenticationWithPasswordResult
  createInitialSystemUser(data: CreateInitialSystemUserInput!): SystemUserAuthenticationWithPasswordSuccess!
}

union SystemUserAuthenticationWithPasswordResult = SystemUserAuthenticationWithPasswordSuccess | SystemUserAuthenticationWithPasswordFailure

type SystemUserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: SystemUser!
}

type SystemUserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialSystemUserInput {
  name: String
  email: String
  password: String
  role: String
}

type Query {
  systemUser(where: SystemUserWhereUniqueInput!): SystemUser
  systemUsers(where: SystemUserWhereInput! = {}, orderBy: [SystemUserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SystemUserWhereUniqueInput): [SystemUser!]
  systemUsersCount(where: SystemUserWhereInput! = {}): Int
  photo(where: PhotoWhereUniqueInput!): Photo
  photos(where: PhotoWhereInput! = {}, orderBy: [PhotoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhotoWhereUniqueInput): [Photo!]
  photosCount(where: PhotoWhereInput! = {}): Int
  legislator(where: LegislatorWhereUniqueInput!): Legislator
  legislators(where: LegislatorWhereInput! = {}, orderBy: [LegislatorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LegislatorWhereUniqueInput): [Legislator!]
  legislatorsCount(where: LegislatorWhereInput! = {}): Int
  legislativeYuanMember(where: LegislativeYuanMemberWhereUniqueInput!): LegislativeYuanMember
  legislativeYuanMembers(where: LegislativeYuanMemberWhereInput! = {}, orderBy: [LegislativeYuanMemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LegislativeYuanMemberWhereUniqueInput): [LegislativeYuanMember!]
  legislativeYuanMembersCount(where: LegislativeYuanMemberWhereInput! = {}): Int
  party(where: PartyWhereUniqueInput!): Party
  parties(where: PartyWhereInput! = {}, orderBy: [PartyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PartyWhereUniqueInput): [Party!]
  partiesCount(where: PartyWhereInput! = {}): Int
  legislativeMeeting(where: LegislativeMeetingWhereUniqueInput!): LegislativeMeeting
  legislativeMeetings(where: LegislativeMeetingWhereInput! = {}, orderBy: [LegislativeMeetingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LegislativeMeetingWhereUniqueInput): [LegislativeMeeting!]
  legislativeMeetingsCount(where: LegislativeMeetingWhereInput! = {}): Int
  legislativeMeetingSession(where: LegislativeMeetingSessionWhereUniqueInput!): LegislativeMeetingSession
  legislativeMeetingSessions(where: LegislativeMeetingSessionWhereInput! = {}, orderBy: [LegislativeMeetingSessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LegislativeMeetingSessionWhereUniqueInput): [LegislativeMeetingSession!]
  legislativeMeetingSessionsCount(where: LegislativeMeetingSessionWhereInput! = {}): Int
  committee(where: CommitteeWhereUniqueInput!): Committee
  committees(where: CommitteeWhereInput! = {}, orderBy: [CommitteeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommitteeWhereUniqueInput): [Committee!]
  committeesCount(where: CommitteeWhereInput! = {}): Int
  topic(where: TopicWhereUniqueInput!): Topic
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  speech(where: SpeechWhereUniqueInput!): Speech
  speeches(where: SpeechWhereInput! = {}, orderBy: [SpeechOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SpeechWhereUniqueInput): [Speech!]
  speechesCount(where: SpeechWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = SystemUser

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
